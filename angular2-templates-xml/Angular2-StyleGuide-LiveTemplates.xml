<templateSet group="Angular2 StyleGuide Live Templates">
  <!-- Components -->
  <template name="ng2comp" value="@Component({})&#10;export class Component {}&#10;$END$" description="Angular2 Component - Empty" toReformat="false" toShortenFQNames="true">
    <context>
      <option name="TypeScript" value="true"/>
    </context>
  </template>
  <template
    name="ng2compBasic"
    value="import {Component} from 'angular2/core';&#10;&#10;@Component({&#10;  selector: '$PREFIX$-$SELECTOR$',&#10;  template: './$COMPNAME$.html',&#10;  styles: ['']&#10;})&#10;export class $CLASSNAME$Component {}&#10;$END$"
    description="Angular2 Component - Basic"
    toReformat="false"
    toShortenFQNames="true">
    <variable name="PREFIX" expression="" defaultValue="&quot;&lt;prefix&gt;&quot;" alwaysStopAt="true"/>
    <variable name="SELECTOR" expression="" defaultValue="&quot;&lt;selector&gt;&quot;" alwaysStopAt="true"/>
    <variable name="COMPNAME" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false"/>
    <variable name="CLASSNAME" expression="capitalize(SELECTOR)" defaultValue="" alwaysStopAt="false"/>
    <context>
      <option name="TypeScript" value="true"/>
    </context>
  </template>
  <template
    name="ng2compComplex"
    value="import {Component} from 'angular2/core';&#10;&#10;@Component({&#10;  selector: '$PREFIX$-$SELECTOR$',&#10;  providers: [],&#10;  viewProviders: [],&#10;  templateUrl: './$COMPNAME$.html',&#10;  styleUrls: ['./$COMPNAME$.$TYPE$'],&#10;  directives: [],&#10;  pipes: []&#10;})&#10;export class $CLASSNAME$Component {}&#10;$END$"
    description="Angular2 Component - Complex"
    toReformat="false"
    toShortenFQNames="true">
    <variable name="PREFIX" expression="" defaultValue="&quot;&lt;prefix&gt;&quot;" alwaysStopAt="true"/>
    <variable name="SELECTOR" expression="" defaultValue="&quot;&lt;selector&gt;&quot;" alwaysStopAt="true"/>
    <variable name="COMPNAME" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false"/>
    <variable name="TYPE" expression="" defaultValue="&quot;css&quot;" alwaysStopAt="true"/>
    <variable name="CLASSNAME" expression="capitalize(SELECTOR)" defaultValue="" alwaysStopAt="false"/>
    <context>
      <option name="TypeScript" value="true"/>
    </context>
  </template>
  <template
    name="ng2compExternal"
    value="import {Component} from 'angular2/core';&#10;&#10;@Component({&#10;  selector: '$PREFIX$-$SELECTOR$',&#10;  templateUrl: './$COMPNAME$.html',&#10;  styleUrls: ['./$COMPNAME$.$TYPE$']&#10;})&#10;export class $CLASSNAME$Component {}&#10;$END$"
    description="Angular2 Component - External"
    toReformat="false"
    toShortenFQNames="true">
    <variable name="PREFIX" expression="" defaultValue="&quot;&lt;prefix&gt;&quot;" alwaysStopAt="true"/>
    <variable name="SELECTOR" expression="" defaultValue="&quot;&lt;selector&gt;&quot;" alwaysStopAt="true"/>
    <variable name="COMPNAME" expression="fileNameWithoutExtension()" defaultValue="" alwaysStopAt="false"/>
    <variable name="TYPE" expression="" defaultValue="&quot;css&quot;" alwaysStopAt="true"/>
    <variable name="CLASSNAME" expression="capitalize(SELECTOR)" defaultValue="" alwaysStopAt="false"/>
    <context>
      <option name="TypeScript" value="true"/>
    </context>
  </template>

  <!-- Directives -->
  <template
    name="ng2directive"
    value="@Directive({})&#10;export class Directive {}&#10;$END$"
    description="Angular2 Directive - Empty"
    toReformat="false"
    toShortenFQNames="true">
    <context>
      <option name="TypeScript" value="true"/>
    </context>
  </template>
  <template
    name="ng2directiveBasic"
    value="@Directive({&#10;  selector: '$SELECTOR$'&#10;})&#10;export class $CLASSNAME$Directive {}&#10;$END$"
    description="Angular2 Directive - Basic"
    toReformat="false"
    toShortenFQNames="true">
    <variable name="SELECTOR" expression="" defaultValue="&quot;&lt;selector&gt;&quot;" alwaysStopAt="true"/>
    <variable name="CLASSNAME" expression="capitalize(SELECTOR)" defaultValue="" alwaysStopAt="True"/>
    <context>
      <option name="TypeScript" value="true"/>
    </context>
  </template>
  <template
    name="ng2directiveComplex"
    value="@Directive({&#10;  selector: '$SELECTOR$',&#10;  providers: [],&#10;  properties: ['']&#10;})&#10;export class $CLASSNAME$Directive {}&#10;$END$"
    description="Angular2 Directive - Complex"
    toReformat="false"
    toShortenFQNames="true">
    <variable name="SELECTOR" expression="" defaultValue="&quot;&lt;selector&gt;&quot;" alwaysStopAt="true"/>
    <variable name="CLASSNAME" expression="capitalize(SELECTOR)" defaultValue="" alwaysStopAt="True"/>
    <context>
      <option name="TypeScript" value="true"/>
    </context>
  </template>

  <!-- Service Templates -->
  <template
    name="ng2service"
    value="@Injectable()&#10;export class $SERVICENAME$Service {}&#10;$END$"
    description="Angular2 Service - Empty"
    toReformat="false"
    toShortenFQNames="true">
    <variable name="SERVICENAME" expression="" defaultValue="&quot;&lt;ServiceName&gt;&quot;" alwaysStopAt="true" />
    <context>
      <option name="TypeScript" value="true" />
    </context>
  </template>

  <!-- Route Configuration Templates -->

  <!-- Routing Templates -->

  <!-- HTML build-in Directives -->
  <template
    name="ng2class"
    value="[(ngClass)]=&quot;{$CLASSNAME$: $MAPVALUE$}&quot;"
    description="Angular2 Class - Built In HTML Directive"
    toReformat="false"
    toShortenFQNames="true">
    <variable name="CLASSNAME" expression="" defaultValue="&quot;class-name&quot;" alwaysStopAt="true" />
    <variable name="MAPVALUE" expression="" defaultValue="&quot;mapValue&quot;" alwaysStopAt="true" />
    <context>
      <option name="HTML_TEXT" value="true" />
      <option name="HTML" value="true" />
    </context>
  </template>
  <template
    name="ng2model"
    value="[(ngModel)]=&quot;$NAME$&quot;"
    description="Angular2 Model - Built In HTML Directive"
    toReformat="false"
    toShortenFQNames="true">
    <variable name="NAME" expression="" defaultValue="&quot;modelName&quot;" alwaysStopAt="true"/>
    <context>
      <option name="HTML_TEXT" value="true"/>
      <option name="HTML" value="true"/>
    </context>
  </template>

  <!-- User Custom Live Templates -->

</templateSet>
